package com.example.liability_scheme.Globalexceptionhandler;

import com.example.liability_scheme.Response.ApiResponse;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.apache.coyote.BadRequestException;
 
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@ControllerAdvice
public class GlobalExceptionHandler {

    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);

    @ExceptionHandler(Exception.class)
    public ResponseEntity<ApiResponse<String>> handleGeneralException(Exception ex) {
        logger.error("Unexpected error occurred: ", ex);

        ApiResponse<String> response = new ApiResponse<>();
        response.setStatus("error");
        response.setMessage("An unexpected error occurred.");
        response.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value()); // 500
        response.setData(null);

        return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @ExceptionHandler(NullPointerException.class)
    public ResponseEntity<ApiResponse<String>> handleNullPointerException(NullPointerException ex) {
        logger.error("Null Pointer Exception: ", ex);

        ApiResponse<String> response = new ApiResponse<>();
        response.setStatus("error");
        response.setMessage("Null value encountered. Please check your inputs.");
        response.setCode(HttpStatus.BAD_REQUEST.value()); // 400
        response.setData(null);

        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(BadRequestException.class)
    public ResponseEntity<ApiResponse<String>> handleBadRequestException(BadRequestException ex) {
        logger.error("Bad request: ", ex);

        ApiResponse<String> response = new ApiResponse<>();
        response.setStatus("error");
        response.setMessage("Invalid input data.");
        response.setCode(HttpStatus.BAD_REQUEST.value()); // 400
        response.setData(null);

        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<ApiResponse<String>> handleValidationException(MethodArgumentNotValidException ex) {
        logger.error("Validation failed: ", ex);

        ApiResponse<String> response = new ApiResponse<>();
        response.setStatus("error");
        response.setMessage("Validation failed: " + ex.getBindingResult().getAllErrors().get(0).getDefaultMessage());
        response.setCode(HttpStatus.BAD_REQUEST.value()); // 400
        response.setData(null);

        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }
}


